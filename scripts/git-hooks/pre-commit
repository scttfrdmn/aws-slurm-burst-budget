#!/bin/bash
# Copyright 2025 Scott Friedman. All rights reserved.
# Pre-commit hook matching Go Report Card and sister project standards

set -e

echo "🔍 Running pre-commit checks matching Go Report Card methodology..."

# Check if we're in a Go project
if [ ! -f "go.mod" ]; then
    echo "❌ Not a Go project (no go.mod found)"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "✅ ${GREEN}$2${NC}"
    else
        echo -e "❌ ${RED}$2${NC}"
    fi
}

# Track overall status
OVERALL_STATUS=0

echo "=== Go Report Card Standard Checks ==="

# 1. gofmt check (exactly as Go Report Card does it)
echo ""
echo "1. gofmt formatting check..."
UNFORMATTED_FILES=$(gofmt -l .)
if [ -z "$UNFORMATTED_FILES" ]; then
    print_status 0 "gofmt formatting"
else
    echo -e "${YELLOW}Fixing formatting issues automatically...${NC}"
    gofmt -w .
    git add .
    print_status 0 "gofmt formatting (auto-fixed)"
fi

# 2. go vet check
echo ""
echo "2. go vet check..."
if go vet ./... > /tmp/vet_output 2>&1; then
    print_status 0 "go vet"
else
    print_status 1 "go vet"
    echo -e "${RED}go vet output:${NC}"
    cat /tmp/vet_output
    OVERALL_STATUS=1
fi

# 3. golint check (using golangci-lint which includes multiple linters)
echo ""
echo "3. golangci-lint (includes golint, ineffassign, misspell, etc.)..."
if command -v golangci-lint &> /dev/null; then
    if golangci-lint run > /tmp/lint_output 2>&1; then
        print_status 0 "golangci-lint"
    else
        print_status 1 "golangci-lint"
        echo -e "${RED}golangci-lint output:${NC}"
        cat /tmp/lint_output
        OVERALL_STATUS=1
    fi
else
    echo -e "${YELLOW}⚠️  golangci-lint not found. Install with:${NC}"
    echo "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b \$(go env GOPATH)/bin"
    OVERALL_STATUS=1
fi

# 4. ineffassign check (standalone, as Go Report Card tests it separately)
echo ""
echo "4. ineffassign check..."
if command -v ineffassign &> /dev/null; then
    if ineffassign ./... > /tmp/ineffassign_output 2>&1; then
        print_status 0 "ineffassign"
    else
        print_status 1 "ineffassign"
        echo -e "${RED}ineffassign output:${NC}"
        cat /tmp/ineffassign_output
        OVERALL_STATUS=1
    fi
else
    echo -e "${YELLOW}⚠️  ineffassign not found. Install with: go install github.com/gordonklaus/ineffassign@latest${NC}"
fi

# 5. misspell check (standalone, as Go Report Card tests it separately)
echo ""
echo "5. misspell check..."
if command -v misspell &> /dev/null; then
    if misspell . > /tmp/misspell_output 2>&1; then
        MISSPELL_COUNT=$(wc -l < /tmp/misspell_output)
        if [ "$MISSPELL_COUNT" -eq 0 ]; then
            print_status 0 "misspell"
        else
            print_status 1 "misspell"
            echo -e "${RED}misspell output:${NC}"
            cat /tmp/misspell_output
            OVERALL_STATUS=1
        fi
    else
        print_status 1 "misspell"
        OVERALL_STATUS=1
    fi
else
    echo -e "${YELLOW}⚠️  misspell not found. Install with: go install github.com/client9/misspell/cmd/misspell@latest${NC}"
fi

# 6. Test execution (Go Report Card considers test compilation)
echo ""
echo "6. Test compilation and execution..."
if go test -short ./... > /tmp/test_output 2>&1; then
    print_status 0 "go test"
else
    print_status 1 "go test"
    echo -e "${RED}Test output:${NC}"
    cat /tmp/test_output
    OVERALL_STATUS=1
fi

# 7. go.mod tidiness check
echo ""
echo "7. go.mod tidiness..."
if go mod tidy > /tmp/mod_output 2>&1; then
    if git diff --exit-code go.mod go.sum > /dev/null 2>&1; then
        print_status 0 "go mod tidy"
    else
        echo -e "${YELLOW}go.mod/go.sum not tidy, fixing...${NC}"
        git add go.mod go.sum
        print_status 0 "go mod tidy (auto-fixed)"
    fi
else
    print_status 1 "go mod tidy"
    echo -e "${RED}go mod tidy output:${NC}"
    cat /tmp/mod_output
    OVERALL_STATUS=1
fi

# 8. License check (Go Report Card checks for license)
echo ""
echo "8. License check..."
if [ -f "LICENSE" ] || [ -f "LICENCE" ] || [ -f "LICENSE.md" ]; then
    print_status 0 "License file present"
else
    print_status 1 "License file missing"
    OVERALL_STATUS=1
fi

# Final status
echo ""
echo "======================================="
if [ $OVERALL_STATUS -eq 0 ]; then
    echo -e "🎉 ${GREEN}All Go Report Card checks passed!${NC}"
    echo -e "📊 ${GREEN}Ready for Grade A rating${NC}"
    echo -e "✨ ${GREEN}Commit approved${NC}"
else
    echo -e "💥 ${RED}Go Report Card checks failed!${NC}"
    echo -e "🔧 ${YELLOW}Fix issues above before committing${NC}"
    echo ""
    echo "Go Report Card checks:"
    echo "  - gofmt: Format Go code"
    echo "  - go vet: Examine code for suspicious constructs"
    echo "  - golangci-lint: Multiple quality checks"
    echo "  - ineffassign: Check for ineffective assignments"
    echo "  - misspell: Check for misspellings"
    echo "  - tests: Ensure tests compile and pass"
    echo "  - go mod: Ensure dependencies are tidy"
    echo "  - license: Check for license file"
fi
echo "======================================="

# Clean up temporary files
rm -f /tmp/vet_output /tmp/lint_output /tmp/ineffassign_output /tmp/misspell_output /tmp/test_output /tmp/mod_output

exit $OVERALL_STATUS