#!/bin/bash
# Copyright 2025 Scott Friedman. All rights reserved.
# Pre-commit hook to maintain Go Report Card grade A

set -e

echo "üîç Running pre-commit checks to maintain Go Report Card grade A..."

# Check if we're in a Go project
if [ ! -f "go.mod" ]; then
    echo "‚ùå Not a Go project (no go.mod found)"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "‚úÖ ${GREEN}$2${NC}"
    else
        echo -e "‚ùå ${RED}$2${NC}"
    fi
}

# Function to run check and track errors
run_check() {
    local cmd="$1"
    local description="$2"

    echo -e "${YELLOW}Running: $description${NC}"
    if eval "$cmd" > /tmp/check_output 2>&1; then
        print_status 0 "$description passed"
        return 0
    else
        print_status 1 "$description failed"
        echo -e "${RED}Output:${NC}"
        cat /tmp/check_output
        return 1
    fi
}

# Track overall status
OVERALL_STATUS=0

# 1. Format check
echo "1. Checking code formatting..."
if ! run_check "gofmt -l . | grep -q ." "Code formatting"; then
    echo -e "${YELLOW}Running 'go fmt' to fix formatting issues...${NC}"
    go fmt ./...
    echo "‚úÖ Code formatted automatically"
else
    echo -e "${RED}Please run 'go fmt ./...' to fix formatting${NC}"
    OVERALL_STATUS=1
fi

# 2. Vet check
echo ""
echo "2. Running go vet..."
if ! run_check "go vet ./..." "go vet"; then
    OVERALL_STATUS=1
fi

# 3. Lint check (if golangci-lint is available)
echo ""
echo "3. Running linter..."
if command -v golangci-lint &> /dev/null; then
    if ! run_check "golangci-lint run" "golangci-lint"; then
        OVERALL_STATUS=1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  golangci-lint not found. Install with: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b \$(go env GOPATH)/bin${NC}"
fi

# 4. Test check
echo ""
echo "4. Running tests..."
if ! run_check "go test -race -short ./..." "Unit tests"; then
    OVERALL_STATUS=1
fi

# 5. Test coverage check
echo ""
echo "5. Checking test coverage..."
if run_check "go test -race -coverprofile=coverage.out ./..." "Test coverage generation"; then
    COVERAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
    echo "Current coverage: ${COVERAGE}%"

    # Check if coverage is above 80%
    if (( $(echo "${COVERAGE} < 80" | bc -l) )); then
        echo -e "‚ùå ${RED}Coverage ${COVERAGE}% is below required threshold of 80%${NC}"
        OVERALL_STATUS=1
    else
        echo -e "‚úÖ ${GREEN}Coverage ${COVERAGE}% meets threshold${NC}"
    fi

    # Clean up coverage file
    rm -f coverage.out
else
    OVERALL_STATUS=1
fi

# 6. Security check (if gosec is available)
echo ""
echo "6. Running security check..."
if command -v gosec &> /dev/null; then
    if ! run_check "gosec -quiet ./..." "Security scan (gosec)"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Security issues found. Review with: gosec ./...${NC}"
        # Don't fail the commit for security warnings, just warn
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  gosec not found. Install with: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest${NC}"
fi

# 7. Check for TODO/FIXME comments in staged files
echo ""
echo "7. Checking for TODO/FIXME comments..."
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
if [ -n "$STAGED_GO_FILES" ]; then
    TODO_COUNT=$(echo "$STAGED_GO_FILES" | xargs grep -c "TODO\|FIXME" 2>/dev/null || echo "0")
    if [ "$TODO_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments in staged files${NC}"
        echo "$STAGED_GO_FILES" | xargs grep -n "TODO\|FIXME" 2>/dev/null || true
        echo -e "${YELLOW}Consider addressing these before committing${NC}"
    else
        echo "‚úÖ No TODO/FIXME comments found"
    fi
else
    echo "‚ÑπÔ∏è  No Go files in staged changes"
fi

# 8. Check go.mod and go.sum are tidy
echo ""
echo "8. Checking go.mod and go.sum..."
if run_check "go mod tidy && git diff --exit-code go.mod go.sum" "go mod tidy"; then
    echo "‚úÖ go.mod and go.sum are tidy"
else
    echo -e "${RED}go.mod or go.sum need to be tidied${NC}"
    echo -e "${YELLOW}Running 'go mod tidy' to fix...${NC}"
    go mod tidy
    git add go.mod go.sum
    echo "‚úÖ go.mod and go.sum tidied and added to commit"
fi

# Final status
echo ""
echo "=========================================="
if [ $OVERALL_STATUS -eq 0 ]; then
    echo -e "üéâ ${GREEN}All pre-commit checks passed!${NC}"
    echo -e "üìä ${GREEN}Go Report Card grade: A${NC}"
    echo -e "‚ú® ${GREEN}Ready to commit${NC}"
else
    echo -e "üí• ${RED}Pre-commit checks failed!${NC}"
    echo -e "üîß ${YELLOW}Please fix the issues above before committing${NC}"
    echo ""
    echo "Quick fixes:"
    echo "  - Format code: make fmt"
    echo "  - Run tests: make test"
    echo "  - Run linter: make lint"
    echo "  - Check coverage: make coverage"
fi
echo "=========================================="

# Clean up
rm -f /tmp/check_output

exit $OVERALL_STATUS