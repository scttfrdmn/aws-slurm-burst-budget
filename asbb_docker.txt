version: '3.8'

services:
  # PostgreSQL database for budget data
  postgres:
    image: postgres:15-alpine
    container_name: asbb-postgres
    environment:
      POSTGRES_DB: asbb_dev
      POSTGRES_USER: asbb
      POSTGRES_PASSWORD: asbb_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U asbb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - asbb-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: asbb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - asbb-network

  # Mock advisor service for development
  mock-advisor:
    image: wiremock/wiremock:latest
    container_name: asbb-mock-advisor
    ports:
      - "8081:8080"
    volumes:
      - ./test/fixtures/wiremock:/home/wiremock:ro
    command: ["--global-response-templating", "--verbose"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/__admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - asbb-network

  # Budget service
  budget-service:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: asbb-budget-service
    ports:
      - "8080:8080"  # Main API
      - "9090:9090"  # Metrics
      - "6060:6060"  # pprof
    environment:
      # Database configuration
      ASBB_DATABASE_DRIVER: postgres
      ASBB_DATABASE_DSN: "postgresql://asbb:asbb_dev_password@postgres:5432/asbb_dev?sslmode=disable"
      ASBB_DATABASE_AUTO_MIGRATE: "true"
      
      # Service configuration
      ASBB_SERVICE_LISTEN_ADDR: ":8080"
      ASBB_SERVICE_ENABLE_METRICS: "true"
      ASBB_SERVICE_METRICS_ADDR: ":9090"
      ASBB_SERVICE_ENABLE_PPROF: "true"
      ASBB_SERVICE_PPROF_ADDR: ":6060"
      
      # Advisor configuration
      ASBB_ADVISOR_URL: "http://mock-advisor:8080"
      ASBB_ADVISOR_TIMEOUT: "30s"
      ASBB_ADVISOR_ENABLE_CACHING: "true"
      ASBB_ADVISOR_CACHE_TTL: "5m"
      
      # Budget configuration
      ASBB_BUDGET_DEFAULT_HOLD_PERCENTAGE: "1.2"
      ASBB_BUDGET_RECONCILIATION_TIMEOUT: "1h"
      ASBB_BUDGET_AUTO_RECONCILIATION: "true"
      ASBB_BUDGET_ALLOW_NEGATIVE_BALANCES: "true"
      
      # Logging configuration
      ASBB_LOGGING_LEVEL: "debug"
      ASBB_LOGGING_FORMAT: "console"
      
      # Development settings
      ASBB_DEV_MODE: "true"
    volumes:
      - .:/app
      - go_cache:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      mock-advisor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - asbb-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: asbb-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - asbb-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: asbb-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - asbb-network
    profiles:
      - monitoring

  # Test database for integration tests
  postgres-test:
    image: postgres:15-alpine
    container_name: asbb-postgres-test
    environment:
      POSTGRES_DB: asbb_test
      POSTGRES_USER: asbb_test
      POSTGRES_PASSWORD: asbb_test_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - asbb-network
    profiles:
      - testing

  # Migration runner
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: migration
    container_name: asbb-migrate
    environment:
      DATABASE_URL: "postgresql://asbb:asbb_dev_password@postgres:5432/asbb_dev?sslmode=disable"
    volumes:
      - ./migrations:/migrations:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - asbb-network
    profiles:
      - tools

  # CLI tools container
  cli:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: cli
    container_name: asbb-cli
    environment:
      ASBB_SERVICE_LISTEN_ADDR: "budget-service:8080"
    volumes:
      - .:/app
      - go_cache:/go/pkg/mod
    depends_on:
      budget-service:
        condition: service_healthy
    networks:
      - asbb-network
    profiles:
      - tools

  # Load balancer for HA testing
  nginx:
    image: nginx:alpine
    container_name: asbb-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - budget-service
    networks:
      - asbb-network
    profiles:
      - ha

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  go_cache:
    driver: local

networks:
  asbb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
# docker-compose.override.yml - for local development overrides
# This file is automatically loaded by docker-compose and can be used
# to override settings for local development

version: '3.8'

services:
  budget-service:
    volumes:
      # Mount source code for hot reload during development
      - .:/app
      - /app/build  # Exclude build directory
    environment:
      # Enable hot reload
      AIR_ENABLED: "true"
      # More verbose logging for development
      ASBB_LOGGING_LEVEL: "debug"
      # Disable authentication for easier development
      ASBB_SECURITY_ENABLE_AUTHENTICATION: "false"

  postgres:
    # Expose postgres logs for debugging
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]

---
# docker-compose.test.yml - for testing environment

version: '3.8'

services:
  budget-service-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      ASBB_DATABASE_DSN: "postgresql://asbb_test:asbb_test_password@postgres-test:5432/asbb_test?sslmode=disable"
      ASBB_ADVISOR_URL: "http://mock-advisor:8080"
      ASBB_LOGGING_LEVEL: "warn"
      ASBB_BUDGET_ALLOW_NEGATIVE_BALANCES: "true"
    depends_on:
      postgres-test:
        condition: service_healthy
      mock-advisor:
        condition: service_healthy
    networks:
      - asbb-network
    command: ["go", "test", "-v", "./..."]

  integration-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      TEST_DATABASE_URL: "postgresql://asbb_test:asbb_test_password@postgres-test:5432/asbb_test?sslmode=disable"
      TEST_SERVICE_URL: "http://budget-service:8080"
      TEST_ADVISOR_URL: "http://mock-advisor:8080"
    depends_on:
      budget-service:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - asbb-network
    command: ["go", "test", "-tags=integration", "-v", "./test/integration/..."]
    profiles:
      - testing

---
# docker-compose.prod.yml - for production-like testing

version: '3.8'

services:
  postgres:
    environment:
      POSTGRES_DB: asbb_prod
      POSTGRES_USER: asbb_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]

  budget-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      ASBB_DATABASE_DSN: "postgresql://asbb_prod:${DB_PASSWORD}@postgres:5432/asbb_prod?sslmode=require"
      ASBB_ADVISOR_URL: "${ADVISOR_URL}"
      ASBB_ADVISOR_API_KEY: "${ADVISOR_API_KEY}"
      ASBB_SECURITY_ENABLE_AUTHENTICATION: "true"
      ASBB_SECURITY_JWT_SECRET: "${JWT_SECRET}"
      ASBB_SECURITY_ENABLE_TLS: "true"
      ASBB_LOGGING_LEVEL: "info"
      ASBB_LOGGING_FORMAT: "json"
      ASBB_BUDGET_ALLOW_NEGATIVE_BALANCES: "false"
      ASBB_DATABASE_AUTO_MIGRATE: "false"
    ports:
      - "443:8080"
    volumes:
      - ./deployments/ssl:/etc/ssl/certs:ro

volumes:
  postgres_prod_data:
    driver: local